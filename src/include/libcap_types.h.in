/* 
 * @CAP_AUTOCONF_NOTICE@
 *
 * libcap_types.h
 *
 * Copyright: University of Utah
 */
#ifndef __LIBCAP_TYPES_H__
#define __LIBCAP_TYPES_H__

#include <libcap_config.h>
#include <libcap_platform_types.h>

/* HELPERS -------------------------------------------------- */

/* Stolen from the Linux kernel */
#define CAP_DIV_ROUND_UP(n,d) (((n) + (d) - 1) / (d))
#define CAP_BITS_TO_LONGS(nr) CAP_DIV_ROUND_UP(nr, 8 * sizeof(long))

/* CPTRs -------------------------------------------------- */

/**
 * cptr_t -- Index into cspace radix tree (like a file descriptor)
 *
 * We wrap it inside a struct def so that the compiler will do strong
 * type checking.
 */
typedef struct {
	unsigned long cptr;
} cptr_t;

/**
 * Reserved cnodes:
 *
 * cptr = 0 is always null
 */
#define CAP_CPTR_NULL ((cptr_t){0})


/* CPTR CACHEs -------------------------------------------------- */

/* 
 * NOTE: This is part of the public interface so that it can be
 * allocated statically (e.g., as a global). This is needed for
 * LCDs because the cptr cache needs to be available before the
 * memory allocators are up and running.
 */
struct cptr_cache {
	/*
	 * lock
	 */
	cap_mutex_t lock;
	/* 
	 * bmaps
	 *
	 * (This part of the def is computed via an awk script; the
	 * CPP is limited and this would require serious CPP hacking to do.)
	 */
	@CAP_CPTR_CACHE_BMAP_DEFS@
};

/* CSPACES -------------------------------------------------- */

/* For now, this def is not public, and hopefully never will be. */
struct cspace;

/* CNODES -------------------------------------------------- */

/* For now, this def is not public, and hopefully never will be. */
struct cnode;

/* CAP TYPE OPS ---------------------------------------- */

struct cap_type_ops {
	char *name;
	int (*delete)(struct cspace *cspace, struct cnode *cnode, void *object);
	int (*revoke)(struct cspace *cspace, struct cnode *cnode, void *object);
};

/* MISC -------------------------------------------------- */

/**
 * Maximum number of types allowed per type system
 */
#ifndef CAP_TYPE_MAX
#define CAP_TYPE_MAX 256
#endif

#endif /* __LIBCAP_TYPES_H__ */
