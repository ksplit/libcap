PREREQUISITES
-------------

  * a basic Linux development environment, including gcc, glibc,
    automake, autoconf, libtool, et al;

  * glib > 2.10 (https://developer.gnome.org/glib/) (this will already
    be installed on any modern Linux distro; you shouldn't need to
    install it from source, ever);

  * Linux kernel headers and build metadata, if you want to build the
    kernel module.

  On Ubuntu, you should be able to get everything you need with this
  command, or similar:

    $ sudo apt-get install build-essential automake autoconf libtool \
        linux-headers-<VERSION> libglib2.0-0 libglib2.0-dev

  (where <VERSION> is the version of the kernel corresponding to your
  installed kernel; on Ubuntu, you'll have already installed a
  linux-image-<VERSION>).



BUILD & INSTALL
---------------

First, run ./autogen.sh in the top source directory.  This will prepare
the source tree to be built.

  $ cd libcap
  $ ./autogen.sh

Second, create a separate object directory; this holds the compiled
binaries and libraries.  You can also build within the source tree, but
usually it's nice to have the separation so you don't have to clean out
lint in your source tree.

  $ cd ..
  $ mkdir libcap.obj
  $ cd libcap.obj

Third, configure the build. Important options:

    PLATFORM={kernel|user}   -- platform to build for

    CSPACE_DEPTH_BITS        -- number between 0 and 8. Controls the
                                depth of the CSpace radix tree. (The
                                depth will be 2^CSPACE_DEPTH_BITS.)

    CSPACE_CNODE_TABLE_BITS  -- number between 0 and 9. Controls the size
                                of the nodes (number of slots) in the
                                CSpace radix tree. (The total slots per
                                cnode table/node will be
                                2^CSPACE_CNODE_TABLE_BITS.)

    --with-kernel-headers    -- if you selected PLATFORM=kernel, you can
                                set the directory that contains the kernel
                                headers to use for the build; the default
                                is lib/modules/`uname -r`/build.

    --enable-test-build      -- build all of the tests for the platform;
                                default is no (does not build tests)

    --enable-kernel-module   -- if you selected PLATFORM=kernel, you can
                                build libcap as a kernel module (default no).
                                You will be able to install libcap.ko and
                                use it with other kernel modules (rather than
                                statically linking libcap.a into those
                                modules at compile time)

 KERNEL_HEADERS_INSTALL=dir  -- if you selected PLATFORM=kernel, this is
                                where the libcap headers will be installed;
                                the default is (libcap build dir)/include.
                                If the directory does not exist, it will be
                                created. Note that the uninstall will not 
                                remove the directory, just the headers.

    --prefix                 -- the installation prefix; you may want to set 
                                it to something out-of-the-way like 
                                /opt/libcap, or you might not. E.g.,

                                   $ ../libcap/configure --prefix=/opt/libcap

    --with-glib              -- if you selected PLATFORM=user, you can
                                set the root of your glib 2.0 install if
                                it is installed in a non-standard place; the
                                default is /usr

You can run `../libcap/configure --help` to see a list of all configure 
options.

Fourth, make!

  $ make

Depending on your settings, this will build libcap as a library for 
user or kernel land, the libcap kernel module, and test programs.

Fifth, make install!

  $ make install

For user-level, this will install libcap and its headers into the prefix
you specified. For kernel-level, this will do nothing (you probably don't
want kernel headers getting mixed up in your user stuff). If you want to
install libcap.ko, the kernel module, do:

  $ make modules_install

Note: You probably won't be able to link a user-level build of libcap with a 
kernel module, or the kernel-level build of libcap with a user app; the 
compilation and linking process differs too much.

If you want to run the test programs, you'd do something like

  $ src/platform/user/test/multi_thrd_cap

and watch the fun.
